{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ MakerTopUp.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {INetworkTreasury} from \"./interfaces/INetworkTreasury.sol\";\nimport {INetworkPaymentAdapter} from \"./interfaces/INetworkPaymentAdapter.sol\";\nimport {VestLike} from \"./interfaces/VestLike.sol\";\nimport {IAutomate} from \"./interfaces/IAutomate.sol\";\nimport {IGelato} from \"./interfaces/IGelato.sol\";\nimport {IRouter} from \"./interfaces/IRouter.sol\";\n\ncontract MakerTopUp is Ownable, INetworkTreasury {\n    IERC20 public constant DAI =\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n\n    INetworkPaymentAdapter public constant PAYMENT_ADAPTER =\n        INetworkPaymentAdapter(0x0B5a34D084b6A5ae4361de033d1e6255623b41eD);\n\n    IAutomate public constant AUTOMATE =\n        IAutomate(0x2A6C106ae13B558BB9E2Ec64Bd2f1f7BEFF3A5E0);\n\n    IRouter public constant ROUTER = IRouter(0xEfF92A263d31888d860bD50809A8D171709b7b1c);\n\n    address public fundsOwner;\n    address public gelatoMakerJob;\n    address private immutable feeCollector;\n\n    constructor(\n        address _fundsOwner,\n        address _newOwner,\n        address _gelatoMakerJob\n    ) {\n        fundsOwner = _fundsOwner;\n        gelatoMakerJob = _gelatoMakerJob;\n        IGelato gelato = IGelato(AUTOMATE.gelato());\n        feeCollector = gelato.feeCollector();\n\n        if (_newOwner != address(0)) transferOwnership(_newOwner);\n    }\n\n    modifier onlyGelatoMakerJob() {\n        require(msg.sender == gelatoMakerJob, \"not GelatoMakerJob\");\n        _;\n    }\n\n    function topUp() external {\n        PAYMENT_ADAPTER.topUp();\n    }\n\n    function setFundsOwner(address _newFundsOwner) external onlyOwner {\n        require(fundsOwner != _newFundsOwner, \"already fundsOwner\");\n\n        fundsOwner = _newFundsOwner;\n    }\n\n    function setGelatoMakerJob(address _newGelatoMakerJob) external onlyOwner {\n        require(gelatoMakerJob != _newGelatoMakerJob, \"already GelatoMakerJob\");\n\n        gelatoMakerJob = _newGelatoMakerJob;\n    }\n\n    function transferDaiToFundsOwner() external onlyOwner {\n        uint256 availableBalance = DAI.balanceOf(address(this));\n        DAI.transfer(fundsOwner, availableBalance);\n    }\n\n    function canTopUp()\n        external\n        view\n        returns (bool canTopUp, bytes memory payload)\n    {\n        canTopUp = PAYMENT_ADAPTER.canTopUp();\n\n        payload = canTopUp\n            ? abi.encodeWithSelector(this.topUp.selector)\n            : bytes(\"!canTopUp\");\n    }\n\n    function getBufferSize() external view override returns (uint256) {\n        return DAI.balanceOf(address(this));\n    }\n\n    function payDoJobs() external onlyGelatoMakerJob {\n    (uint256 fee,) = _getFeeDetails();\n    \n     \n     _transfer(fee);\n\n    }\n\n    function _transfer(uint256 _fee) internal {\n        (bool success, ) = feeCollector.call{value: _fee}(\"\");\n        require(success, \"_transfer: ETH transfer failed\");\n    }\n\n    function _getFeeDetails()\n        internal\n        view\n        returns (uint256 fee, address feeToken)\n    {\n        (fee, feeToken) = AUTOMATE.getFeeDetails();\n        fee = 100;\n    }\n\n        function _swap(\n        uint256 fee,\n        uint256 deadline\n    ) internal {\n        address WETH = ROUTER.WETH();\n\n        address[] memory path = new address[](2);\n        path[0] = address(DAI);\n        path[1] = WETH;\n\n        DAI.approve(address(ROUTER), fee);\n\n        ROUTER.swapTokensForExactETH(\n            fee,\n            fee,\n            path,\n            address(this),\n            deadline\n        );\n\n    }\n}\n"
    },
    "contracts/interfaces/IAutomate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAutomate {\n \n    function getFeeDetails() external view returns (uint256, address);\n\n    function gelato() external view returns (address payable);\n\n}"
    },
    "contracts/interfaces/IGelato.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGelato {\n    function feeCollector() external view returns (address);\n}"
    },
    "contracts/interfaces/INetworkPaymentAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {INetworkTreasury} from \"./INetworkTreasury.sol\";\n\ninterface INetworkPaymentAdapter {\n    function file(bytes32 what, address data) external;\n\n    function file(bytes32 what, uint256 data) external;\n\n    /**\n     * @notice Top up the treasury with any outstanding DAI\n     * @dev Only callable from treasury. Call canTopUp() to see if this will pass.\n     */\n    function topUp() external returns (uint256 daiSent);\n\n    /**\n     * @notice Check if we can call the topUp() function.\n     */\n    function canTopUp() external view returns (bool);\n\n    function vestId() external view returns (uint256);\n\n    function bufferMax() external view returns (uint256);\n\n    function minimumPayment() external view returns (uint256);\n\n    function treasury() external view returns (INetworkTreasury);\n\n      function vest() external view returns (address);\n\n\n}"
    },
    "contracts/interfaces/INetworkTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface INetworkTreasury {\n    /**\n     * @dev This should return an estimate of the total value of the buffer in DAI.\n     * Keeper Networks should convert non-DAI assets to DAI value via an oracle.\n     *\n     * Ex) If the network bulk trades DAI for ETH then the value of the ETH sitting\n     * in the treasury should count towards this buffer size.\n     */\n    function getBufferSize() external view returns (uint256);\n}"
    },
    "contracts/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\ninterface IRouter {\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n  external\n  returns (uint[] memory amounts);\n\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n  external\n  returns (uint[] memory amounts);\n}"
    },
    "contracts/interfaces/VestLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VestLike {\n    function vest(uint256) external;\n    function unpaid(uint256) external view returns (uint256);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}