{
  "address": "0xd2983525E903Ef198d5dD0777712EB66680463bc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundsOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gelatoMakerJob",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTOMATE",
      "outputs": [
        {
          "internalType": "contract IAutomate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYMENT_ADAPTER",
      "outputs": [
        {
          "internalType": "contract INetworkPaymentAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canTopUp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canTopUp",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoMakerJob",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBufferSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payDoJobs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFundsOwner",
          "type": "address"
        }
      ],
      "name": "setFundsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGelatoMakerJob",
          "type": "address"
        }
      ],
      "name": "setGelatoMakerJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferDaiToFundsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c8b49b1e9cd58533a9cb3a5edb3eac8c912650663da49204413a66a5926e119",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xd2983525E903Ef198d5dD0777712EB66680463bc",
    "transactionIndex": 0,
    "gasUsed": "1279066",
    "logsBloom": "0x
    "blockHash": "0x2439ed11797841f572cd742c0a520424638dc97fbb1ee54a806e924c35a1c6ca",
    "transactionHash": "0x4c8b49b1e9cd58533a9cb3a5edb3eac8c912650663da49204413a66a5926e119",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20626683,
        "transactionHash": "0x4c8b49b1e9cd58533a9cb3a5edb3eac8c912650663da49204413a66a5926e119",
        "address": "0xd2983525E903Ef198d5dD0777712EB66680463bc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2439ed11797841f572cd742c0a520424638dc97fbb1ee54a806e924c35a1c6ca"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20626683,
        "transactionHash": "0x4c8b49b1e9cd58533a9cb3a5edb3eac8c912650663da49204413a66a5926e119",
        "address": "0xd2983525E903Ef198d5dD0777712EB66680463bc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2439ed11797841f572cd742c0a520424638dc97fbb1ee54a806e924c35a1c6ca"
      }
    ],
    "blockNumber": 20626683,
    "cumulativeGasUsed": "1279066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xe8c3F27D20472e4f3C546A3f73C04B54DD72871d"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb8911f54773df06e1310925ec664cf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundsOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gelatoMakerJob\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTOMATE\",\"outputs\":[{\"internalType\":\"contract IAutomate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENT_ADAPTER\",\"outputs\":[{\"internalType\":\"contract INetworkPaymentAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canTopUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canTopUp\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoMakerJob\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payDoJobs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFundsOwner\",\"type\":\"address\"}],\"name\":\"setFundsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGelatoMakerJob\",\"type\":\"address\"}],\"name\":\"setGelatoMakerJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDaiToFundsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBufferSize()\":{\"details\":\"This should return an estimate of the total value of the buffer in DAI. Keeper Networks should convert non-DAI assets to DAI value via an oracle. Ex) If the network bulk trades DAI for ETH then the value of the ETH sitting in the treasury should count towards this buffer size.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ MakerTopUp.sol\":\"MakerTopUp\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ MakerTopUp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {INetworkTreasury} from \\\"./interfaces/INetworkTreasury.sol\\\";\\nimport {INetworkPaymentAdapter} from \\\"./interfaces/INetworkPaymentAdapter.sol\\\";\\nimport {VestLike} from \\\"./interfaces/VestLike.sol\\\";\\nimport {IAutomate} from \\\"./interfaces/IAutomate.sol\\\";\\nimport {IGelato} from \\\"./interfaces/IGelato.sol\\\";\\nimport {IRouter} from \\\"./interfaces/IRouter.sol\\\";\\n\\ncontract MakerTopUp is Ownable, INetworkTreasury {\\n    IERC20 public constant DAI =\\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n\\n    INetworkPaymentAdapter public constant PAYMENT_ADAPTER =\\n        INetworkPaymentAdapter(0x0B5a34D084b6A5ae4361de033d1e6255623b41eD);\\n\\n    IAutomate public constant AUTOMATE =\\n        IAutomate(0x2A6C106ae13B558BB9E2Ec64Bd2f1f7BEFF3A5E0);\\n\\n    IRouter public constant ROUTER = IRouter(0xEfF92A263d31888d860bD50809A8D171709b7b1c);\\n\\n    address public fundsOwner;\\n    address public gelatoMakerJob;\\n    address private immutable feeCollector;\\n\\n    constructor(\\n        address _fundsOwner,\\n        address _newOwner,\\n        address _gelatoMakerJob\\n    ) {\\n        fundsOwner = _fundsOwner;\\n        gelatoMakerJob = _gelatoMakerJob;\\n        IGelato gelato = IGelato(AUTOMATE.gelato());\\n        feeCollector = gelato.feeCollector();\\n\\n        if (_newOwner != address(0)) transferOwnership(_newOwner);\\n    }\\n\\n    modifier onlyGelatoMakerJob() {\\n        require(msg.sender == gelatoMakerJob, \\\"not GelatoMakerJob\\\");\\n        _;\\n    }\\n\\n    function topUp() external {\\n        PAYMENT_ADAPTER.topUp();\\n    }\\n\\n    function setFundsOwner(address _newFundsOwner) external onlyOwner {\\n        require(fundsOwner != _newFundsOwner, \\\"already fundsOwner\\\");\\n\\n        fundsOwner = _newFundsOwner;\\n    }\\n\\n    function setGelatoMakerJob(address _newGelatoMakerJob) external onlyOwner {\\n        require(gelatoMakerJob != _newGelatoMakerJob, \\\"already GelatoMakerJob\\\");\\n\\n        gelatoMakerJob = _newGelatoMakerJob;\\n    }\\n\\n    function transferDaiToFundsOwner() external onlyOwner {\\n        uint256 availableBalance = DAI.balanceOf(address(this));\\n        DAI.transfer(fundsOwner, availableBalance);\\n    }\\n\\n    function canTopUp()\\n        external\\n        view\\n        returns (bool canTopUp, bytes memory payload)\\n    {\\n        canTopUp = PAYMENT_ADAPTER.canTopUp();\\n\\n        payload = canTopUp\\n            ? abi.encodeWithSelector(this.topUp.selector)\\n            : bytes(\\\"!canTopUp\\\");\\n    }\\n\\n    function getBufferSize() external view override returns (uint256) {\\n        return DAI.balanceOf(address(this));\\n    }\\n\\n    function payDoJobs() external onlyGelatoMakerJob {\\n    (uint256 fee,) = _getFeeDetails();\\n    \\n     \\n     _transfer(fee);\\n\\n    }\\n\\n    function _transfer(uint256 _fee) internal {\\n        (bool success, ) = feeCollector.call{value: _fee}(\\\"\\\");\\n        require(success, \\\"_transfer: ETH transfer failed\\\");\\n    }\\n\\n    function _getFeeDetails()\\n        internal\\n        view\\n        returns (uint256 fee, address feeToken)\\n    {\\n        (fee, feeToken) = AUTOMATE.getFeeDetails();\\n        fee = 100;\\n    }\\n\\n        function _swap(\\n        uint256 fee,\\n        uint256 deadline\\n    ) internal {\\n        address WETH = ROUTER.WETH();\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(DAI);\\n        path[1] = WETH;\\n\\n        DAI.approve(address(ROUTER), fee);\\n\\n        ROUTER.swapTokensForExactETH(\\n            fee,\\n            fee,\\n            path,\\n            address(this),\\n            deadline\\n        );\\n\\n    }\\n}\\n\",\"keccak256\":\"0xbcd6116a2ebd2e95191089178d23c5dcc536c821be4a35bed7200207010019b7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAutomate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAutomate {\\n \\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function gelato() external view returns (address payable);\\n\\n}\",\"keccak256\":\"0x9f424e95229b75201179be6992d11caddad8ed0ca4db7397094475c42a243450\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGelato {\\n    function feeCollector() external view returns (address);\\n}\",\"keccak256\":\"0x12823a421d409aaea1f628cece2a4fb290db6b9e73faf29ab9480b4cbdd38eb9\",\"license\":\"MIT\"},\"contracts/interfaces/INetworkPaymentAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {INetworkTreasury} from \\\"./INetworkTreasury.sol\\\";\\n\\ninterface INetworkPaymentAdapter {\\n    function file(bytes32 what, address data) external;\\n\\n    function file(bytes32 what, uint256 data) external;\\n\\n    /**\\n     * @notice Top up the treasury with any outstanding DAI\\n     * @dev Only callable from treasury. Call canTopUp() to see if this will pass.\\n     */\\n    function topUp() external returns (uint256 daiSent);\\n\\n    /**\\n     * @notice Check if we can call the topUp() function.\\n     */\\n    function canTopUp() external view returns (bool);\\n\\n    function vestId() external view returns (uint256);\\n\\n    function bufferMax() external view returns (uint256);\\n\\n    function minimumPayment() external view returns (uint256);\\n\\n    function treasury() external view returns (INetworkTreasury);\\n\\n      function vest() external view returns (address);\\n\\n\\n}\",\"keccak256\":\"0xf9bb6ecbd3095f5b493210a97e0e8ddd2703f3850fac803d5c1b4e40a4d57d75\",\"license\":\"MIT\"},\"contracts/interfaces/INetworkTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INetworkTreasury {\\n    /**\\n     * @dev This should return an estimate of the total value of the buffer in DAI.\\n     * Keeper Networks should convert non-DAI assets to DAI value via an oracle.\\n     *\\n     * Ex) If the network bulk trades DAI for ETH then the value of the ETH sitting\\n     * in the treasury should count towards this buffer size.\\n     */\\n    function getBufferSize() external view returns (uint256);\\n}\",\"keccak256\":\"0xb39b3e213694335c47272755158487c21be977218e28f344ce13029b72c12b47\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\ninterface IRouter {\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n  external\\n  returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n  external\\n  returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x8e11bdafa1e20c8fac8f6499a896cdf3118d3b3299f317cde59aaeb4644f67c5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/VestLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VestLike {\\n    function vest(uint256) external;\\n    function unpaid(uint256) external view returns (uint256);\\n}\",\"keccak256\":\"0xe5280725ee274424a0a9e6fb3008ab3012fbb15063927bde2f7d89306de0a4b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001b4038038062001b408339818101604052810190620000379190620004e0565b620000576200004b6200025960201b60201c565b6200026160201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000732a6c106ae13b558bb9e2ec64bd2f1f7beff3a5e073ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000581565b90508073ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d59190620005b3565b73ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146200024f576200024e836200032560201b60201c565b5b5050505062000700565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b62000335620003bc60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620003a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200039f906200066c565b60405180910390fd5b620003b9816200026160201b60201c565b50565b620003cc6200025960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003f26200044d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200044b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200044290620006de565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004a8826200047b565b9050919050565b620004ba816200049b565b8114620004c657600080fd5b50565b600081519050620004da81620004af565b92915050565b600080600060608486031215620004fc57620004fb62000476565b5b60006200050c86828701620004c9565b93505060206200051f86828701620004c9565b92505060406200053286828701620004c9565b9150509250925092565b600062000549826200047b565b9050919050565b6200055b816200053c565b81146200056757600080fd5b50565b6000815190506200057b8162000550565b92915050565b6000602082840312156200059a576200059962000476565b5b6000620005aa848285016200056a565b91505092915050565b600060208284031215620005cc57620005cb62000476565b5b6000620005dc84828501620004c9565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000654602683620005e5565b91506200066182620005f6565b604082019050919050565b60006020820190508181036000830152620006878162000645565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620006c6602083620005e5565b9150620006d3826200068e565b602082019050919050565b60006020820190508181036000830152620006f981620006b7565b9050919050565b6080516114246200071c6000396000610b2101526114246000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063dc29f1de11610066578063dc29f1de1461022e578063e0bab4c414610238578063e7a10fae14610256578063f2fde38b1461027457610100565b80638da5cb5b146101ba578063a41e7098146101d8578063aec1c327146101f6578063c6765fc91461021257610100565b8063715018a6116100d3578063715018a614610155578063761c29401461015f5780637cba7b901461017e5780638628d9b61461019c57610100565b8063248580271461010557806332fe7b261461010f57806346ee3c591461012d5780636aca3ad61461014b575b600080fd5b61010d610290565b005b6101176103e2565b6040516101249190610d38565b60405180910390f35b6101356103fa565b6040516101429190610d74565b60405180910390f35b610153610420565b005b61015d6104c9565b005b6101676104dd565b604051610175929190610e43565b60405180910390f35b610186610618565b6040516101939190610e94565b60405180910390f35b6101a4610630565b6040516101b19190610ec8565b60405180910390f35b6101c26106c5565b6040516101cf9190610d74565b60405180910390f35b6101e06106ee565b6040516101ed9190610d74565b60405180910390f35b610210600480360381019061020b9190610f14565b610714565b005b61022c60048036038101906102279190610f14565b6107f1565b005b6102366108ce565b005b610240610956565b60405161024d9190610f62565b60405180910390f35b61025e61096e565b60405161026b9190610f9e565b60405180910390f35b61028e60048036038101906102899190610f14565b610986565b005b610298610a0a565b6000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102e79190610d74565b602060405180830381865afa158015610304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103289190610fe5565b9050736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161039b929190611012565b6020604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190611067565b5050565b73eff92a263d31888d860bd50809a8d171709b7b1c81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a7906110f1565b60405180910390fd5b60006104ba610a88565b5090506104c681610b1d565b50565b6104d1610a0a565b6104db6000610bed565b565b60006060730b5a34d084b6a5ae4361de033d1e6255623b41ed73ffffffffffffffffffffffffffffffffffffffff1663761c29406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105649190611067565b9150816105a6576040518060400160405280600981526020017f2163616e546f7055700000000000000000000000000000000000000000000000815250610612565b63dc29f1de60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050505b90509091565b730b5a34d084b6a5ae4361de033d1e6255623b41ed81565b6000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161067f9190610d74565b602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190610fe5565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61071c610a0a565b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061115d565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107f9610a0a565b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561088a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610881906111c9565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b730b5a34d084b6a5ae4361de033d1e6255623b41ed73ffffffffffffffffffffffffffffffffffffffff1663dc29f1de6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561092f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109539190610fe5565b50565b736b175474e89094c44da98b954eedeac495271d0f81565b732a6c106ae13b558bb9e2ec64bd2f1f7beff3a5e081565b61098e610a0a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f59061125b565b60405180910390fd5b610a0781610bed565b50565b610a12610cb1565b73ffffffffffffffffffffffffffffffffffffffff16610a306106c5565b73ffffffffffffffffffffffffffffffffffffffff1614610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d906112c7565b60405180910390fd5b565b600080732a6c106ae13b558bb9e2ec64bd2f1f7beff3a5e073ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d91906112fc565b8092508193505050606491509091565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051610b639061136d565b60006040518083038185875af1925050503d8060008114610ba0576040519150601f19603f3d011682016040523d82523d6000602084013e610ba5565b606091505b5050905080610be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be0906113ce565b60405180910390fd5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610cfe610cf9610cf484610cb9565b610cd9565b610cb9565b9050919050565b6000610d1082610ce3565b9050919050565b6000610d2282610d05565b9050919050565b610d3281610d17565b82525050565b6000602082019050610d4d6000830184610d29565b92915050565b6000610d5e82610cb9565b9050919050565b610d6e81610d53565b82525050565b6000602082019050610d896000830184610d65565b92915050565b60008115159050919050565b610da481610d8f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610de4578082015181840152602081019050610dc9565b83811115610df3576000848401525b50505050565b6000601f19601f8301169050919050565b6000610e1582610daa565b610e1f8185610db5565b9350610e2f818560208601610dc6565b610e3881610df9565b840191505092915050565b6000604082019050610e586000830185610d9b565b8181036020830152610e6a8184610e0a565b90509392505050565b6000610e7e82610d05565b9050919050565b610e8e81610e73565b82525050565b6000602082019050610ea96000830184610e85565b92915050565b6000819050919050565b610ec281610eaf565b82525050565b6000602082019050610edd6000830184610eb9565b92915050565b600080fd5b610ef181610d53565b8114610efc57600080fd5b50565b600081359050610f0e81610ee8565b92915050565b600060208284031215610f2a57610f29610ee3565b5b6000610f3884828501610eff565b91505092915050565b6000610f4c82610d05565b9050919050565b610f5c81610f41565b82525050565b6000602082019050610f776000830184610f53565b92915050565b6000610f8882610d05565b9050919050565b610f9881610f7d565b82525050565b6000602082019050610fb36000830184610f8f565b92915050565b610fc281610eaf565b8114610fcd57600080fd5b50565b600081519050610fdf81610fb9565b92915050565b600060208284031215610ffb57610ffa610ee3565b5b600061100984828501610fd0565b91505092915050565b60006040820190506110276000830185610d65565b6110346020830184610eb9565b9392505050565b61104481610d8f565b811461104f57600080fd5b50565b6000815190506110618161103b565b92915050565b60006020828403121561107d5761107c610ee3565b5b600061108b84828501611052565b91505092915050565b600082825260208201905092915050565b7f6e6f742047656c61746f4d616b65724a6f620000000000000000000000000000600082015250565b60006110db601283611094565b91506110e6826110a5565b602082019050919050565b6000602082019050818103600083015261110a816110ce565b9050919050565b7f616c72656164792066756e64734f776e65720000000000000000000000000000600082015250565b6000611147601283611094565b915061115282611111565b602082019050919050565b600060208201905081810360008301526111768161113a565b9050919050565b7f616c72656164792047656c61746f4d616b65724a6f6200000000000000000000600082015250565b60006111b3601683611094565b91506111be8261117d565b602082019050919050565b600060208201905081810360008301526111e2816111a6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611245602683611094565b9150611250826111e9565b604082019050919050565b6000602082019050818103600083015261127481611238565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112b1602083611094565b91506112bc8261127b565b602082019050919050565b600060208201905081810360008301526112e0816112a4565b9050919050565b6000815190506112f681610ee8565b92915050565b6000806040838503121561131357611312610ee3565b5b600061132185828601610fd0565b9250506020611332858286016112e7565b9150509250929050565b600081905092915050565b50565b600061135760008361133c565b915061136282611347565b600082019050919050565b60006113788261134a565b9150819050919050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b60006113b8601e83611094565b91506113c382611382565b602082019050919050565b600060208201905081810360008301526113e7816113ab565b905091905056fea26469706673582212206dccb2c3f80ed79f9444583e2bc88e8d10d0961287d53b3777f45878574765ec64736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBufferSize()": {
        "details": "This should return an estimate of the total value of the buffer in DAI. Keeper Networks should convert non-DAI assets to DAI value via an oracle. Ex) If the network bulk trades DAI for ETH then the value of the ETH sitting in the treasury should count towards this buffer size."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ MakerTopUp.sol:MakerTopUp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 260,
        "contract": "contracts/ MakerTopUp.sol:MakerTopUp",
        "label": "fundsOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 262,
        "contract": "contracts/ MakerTopUp.sol:MakerTopUp",
        "label": "gelatoMakerJob",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}