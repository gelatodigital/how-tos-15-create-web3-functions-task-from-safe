{
  "address": "0x6C71E072CA9EDD35438c5e8d2a8836F42345b31d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pokeMe",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_network",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endIndex",
          "type": "uint256"
        }
      ],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        }
      ],
      "name": "doJobs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeMe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x528e47d274df6696ed521bbc5352e15ec3843f9ba15171520523aa9c1b08903b",
  "receipt": {
    "to": null,
    "from": "0xB65540bBA534E88EB4a5062D0E6519C07063b259",
    "contractAddress": "0x6C71E072CA9EDD35438c5e8d2a8836F42345b31d",
    "transactionIndex": 27,
    "gasUsed": "1569109",
    "logsBloom": "0x
    "blockHash": "0x0ebe0804035c0f503b12e99eade5bd8a5c8f4743066c0deec00a9ad13e3f7bca",
    "transactionHash": "0x528e47d274df6696ed521bbc5352e15ec3843f9ba15171520523aa9c1b08903b",
    "logs": [],
    "blockNumber": 6574503,
    "cumulativeGasUsed": "6629132",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93719de6A0ea910c37a4C3e3CA24b88D386fb940"
  ],
  "numDeployments": 1,
  "solcInputHash": "09556027c79465b6b3f81948efdff2f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pokeMe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_network\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"doJobs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeMe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoMakerJob.sol\":\"GelatoMakerJob\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/GelatoMakerJob.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n//solhint-disable compiler-version\\npragma solidity 0.8.11;\\nimport {GelatoBytes} from \\\"./gelato/GelatoBytes.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ninterface ISequencer {\\n    struct WorkableJob {\\n        address job;\\n        bool canWork;\\n        bytes args;\\n    }\\n\\n    function getNextJobs(\\n        bytes32 network,\\n        uint256 startIndex,\\n        uint256 endIndexExcl\\n    ) external returns (WorkableJob[] memory);\\n\\n    function numJobs() external view returns (uint256);\\n}\\n\\ninterface IJob {\\n    function work(bytes32 network, bytes calldata args) external;\\n\\n    function workable(bytes32 network)\\n        external\\n        returns (bool canWork, bytes memory args);\\n}\\n\\ncontract GelatoMakerJob {\\n    using GelatoBytes for bytes;\\n\\n    address public immutable pokeMe;\\n\\n    constructor(address _pokeMe) {\\n        pokeMe = _pokeMe;\\n    }\\n\\n    //solhint-disable code-complexity\\n    //solhint-disable function-max-lines\\n    function checker(\\n        address _sequencer,\\n        bytes32 _network,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external returns (bool, bytes memory) {\\n        ISequencer sequencer = ISequencer(_sequencer);\\n        uint256 numJobs = sequencer.numJobs();\\n\\n        if (numJobs == 0)\\n            return (false, bytes(\\\"GelatoMakerJob: No jobs listed\\\"));\\n        if (_startIndex >= numJobs) {\\n            bytes memory msg1 = bytes.concat(\\n                \\\"GelatoMakerJob: Only jobs available up to index \\\",\\n                bytes(Strings.toString(numJobs - 1))\\n            );\\n\\n            bytes memory msg2 = bytes.concat(\\n                \\\", inputted startIndex is \\\",\\n                bytes(Strings.toString(_startIndex))\\n            );\\n            return (false, bytes.concat(msg1, msg2));\\n        }\\n\\n        uint256 endIndex = _endIndex > numJobs ? numJobs : _endIndex;\\n\\n        ISequencer.WorkableJob[] memory jobs = ISequencer(_sequencer)\\n            .getNextJobs(_network, _startIndex, endIndex);\\n\\n        uint256 numWorkable;\\n        for (uint256 i; i < jobs.length; i++) {\\n            if (jobs[i].canWork) numWorkable++;\\n        }\\n\\n        if (numWorkable == 0)\\n            return (false, bytes(\\\"GelatoMakerJob: No workable jobs\\\"));\\n\\n        address[] memory tos = new address[](numWorkable);\\n        bytes[] memory datas = new bytes[](numWorkable);\\n\\n        uint256 wIndex;\\n        for (uint256 i; i < jobs.length; i++) {\\n            if (jobs[i].canWork) {\\n                tos[wIndex] = jobs[i].job;\\n                datas[wIndex] = abi.encodeWithSelector(\\n                    IJob.work.selector,\\n                    _network,\\n                    jobs[i].args\\n                );\\n                wIndex++;\\n            }\\n        }\\n\\n        bytes memory execPayload = abi.encodeWithSelector(\\n            this.doJobs.selector,\\n            tos,\\n            datas\\n        );\\n\\n        return (true, execPayload);\\n    }\\n\\n    function doJobs(address[] calldata _tos, bytes[] calldata _datas) external {\\n        require(msg.sender == pokeMe, \\\"GelatoMakerJob: Only PokeMe\\\");\\n        require(\\n            _tos.length == _datas.length,\\n            \\\"GelatoMakerJob: Length mismatch\\\"\\n        );\\n\\n        for (uint256 i; i < _tos.length; i++) {\\n            _doJob(_tos[i], _datas[i]);\\n        }\\n    }\\n\\n    function _doJob(address _to, bytes memory _data) private {\\n        (bool success, bytes memory returnData) = _to.call(_data);\\n        if (!success) returnData.revertWithError(\\\"GelatoMakerJob: \\\");\\n    }\\n}\",\"keccak256\":\"0x64279206b36ea657fd25ae4a24a67ce00612db9c1a1912dbe7fac1777f6ec799\",\"license\":\"UNLICENSED\"},\"contracts/gelato/GelatoBytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n//solhint-disable compiler-version\\npragma solidity 0.8.11;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\",\"keccak256\":\"0x8aae5bd2638f648456fd84c5c62b2a8b20d618557744fed270a109c3dcb98b78\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001c9d38038062001c9d8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611b6d620001306000396000818160b301526107950152611b6d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630546660e1461004657806328d7b1d314610062578063c84eee0d14610093575b600080fd5b610060600480360381019061005b9190610cdd565b6100b1565b005b61007c60048036038101906100779190610e28565b610247565b60405161008a929190610f43565b60405180910390f35b61009b610793565b6040516100a89190610f82565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461013f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013690610ffa565b60405180910390fd5b818190508484905014610187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017e90611066565b60405180910390fd5b60005b848490508110156102405761022d8585838181106101ab576101aa611086565b5b90506020020160208101906101c091906110b5565b8484848181106101d3576101d2611086565b5b90506020028101906101e591906110f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b7565b808061023890611183565b91505061018a565b5050505050565b60006060600086905060008173ffffffffffffffffffffffffffffffffffffffff16639212051c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906111e1565b9050600081141561030f5760006040518060400160405280601e81526020017f47656c61746f4d616b65724a6f623a204e6f206a6f6273206c6973746564000081525093509350505061078a565b8086106103ab57600061032d600183610328919061120e565b61087a565b60405160200161033d91906112f0565b604051602081830303815290604052905060006103598861087a565b6040516020016103699190611338565b60405160208183030381529060405290506000828260405160200161038f92919061135e565b604051602081830303815290604052955095505050505061078a565b60008186116103ba57856103bc565b815b905060008973ffffffffffffffffffffffffffffffffffffffff1663a613ff9c8a8a856040518463ffffffff1660e01b81526004016103fd939291906113a0565b6000604051808303816000875af115801561041c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061044591906116a4565b90506000805b825181101561049a5782818151811061046757610466611086565b5b6020026020010151602001511561048757818061048390611183565b9250505b808061049290611183565b91505061044b565b5060008114156104ea5760006040518060400160405280602081526020017f47656c61746f4d616b65724a6f623a204e6f20776f726b61626c65206a6f627381525096509650505050505061078a565b60008167ffffffffffffffff811115610506576105056113d7565b5b6040519080825280602002602001820160405280156105345781602001602082028036833780820191505090505b50905060008267ffffffffffffffff811115610553576105526113d7565b5b60405190808252806020026020018201604052801561058657816020015b60608152602001906001900390816105715790505b5090506000805b85518110156106fc578581815181106105a9576105a8611086565b5b602002602001015160200151156106e9578581815181106105cd576105cc611086565b5b6020026020010151600001518483815181106105ec576105eb611086565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050631d2ab00060e01b8e87838151811061064257610641611086565b5b60200260200101516040015160405160240161065f9291906116ed565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508383815181106106cf576106ce611086565b5b602002602001018190525081806106e590611183565b9250505b80806106f490611183565b91505061058d565b506000630546660e60e01b848460405160240161071a9291906118e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506001819a509a505050505050505050505b94509492505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516107df919061191e565b6000604051808303816000865af19150503d806000811461081c576040519150601f19603f3d011682016040523d82523d6000602084013e610821565b606091505b509150915081610874576108736040518060400160405280601081526020017f47656c61746f4d616b65724a6f623a20000000000000000000000000000000008152508261095290919063ffffffff16565b5b50505050565b60606000600161088984610abb565b01905060008167ffffffffffffffff8111156108a8576108a76113d7565b5b6040519080825280601f01601f1916602001820160405280156108da5781602001600182028036833780820191505090505b509050600082602001820190505b600115610947578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161093157610930611935565b5b049450600085141561094257610947565b6108e8565b819350505050919050565b6004602083516109629190611964565b1415610a5f576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610a035760448301925081836040516020016109b89291906119dc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa9190611a39565b60405180910390fd5b81604051602001610a149190611aa7565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a569190611a39565b60405180910390fd5b80604051602001610a709190611b15565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab29190611a39565b60405180910390fd5b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610b19577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610b0f57610b0e611935565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610b56576d04ee2d6d415b85acef81000000008381610b4c57610b4b611935565b5b0492506020810190505b662386f26fc100008310610b8557662386f26fc100008381610b7b57610b7a611935565b5b0492506010810190505b6305f5e1008310610bae576305f5e1008381610ba457610ba3611935565b5b0492506008810190505b6127108310610bd3576127108381610bc957610bc8611935565b5b0492506004810190505b60648310610bf65760648381610bec57610beb611935565b5b0492506002810190505b600a8310610c05576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610c4757610c46610c22565b5b8235905067ffffffffffffffff811115610c6457610c63610c27565b5b602083019150836020820283011115610c8057610c7f610c2c565b5b9250929050565b60008083601f840112610c9d57610c9c610c22565b5b8235905067ffffffffffffffff811115610cba57610cb9610c27565b5b602083019150836020820283011115610cd657610cd5610c2c565b5b9250929050565b60008060008060408587031215610cf757610cf6610c18565b5b600085013567ffffffffffffffff811115610d1557610d14610c1d565b5b610d2187828801610c31565b9450945050602085013567ffffffffffffffff811115610d4457610d43610c1d565b5b610d5087828801610c87565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d8982610d5e565b9050919050565b610d9981610d7e565b8114610da457600080fd5b50565b600081359050610db681610d90565b92915050565b6000819050919050565b610dcf81610dbc565b8114610dda57600080fd5b50565b600081359050610dec81610dc6565b92915050565b6000819050919050565b610e0581610df2565b8114610e1057600080fd5b50565b600081359050610e2281610dfc565b92915050565b60008060008060808587031215610e4257610e41610c18565b5b6000610e5087828801610da7565b9450506020610e6187828801610ddd565b9350506040610e7287828801610e13565b9250506060610e8387828801610e13565b91505092959194509250565b60008115159050919050565b610ea481610e8f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ee4578082015181840152602081019050610ec9565b83811115610ef3576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f1582610eaa565b610f1f8185610eb5565b9350610f2f818560208601610ec6565b610f3881610ef9565b840191505092915050565b6000604082019050610f586000830185610e9b565b8181036020830152610f6a8184610f0a565b90509392505050565b610f7c81610d7e565b82525050565b6000602082019050610f976000830184610f73565b92915050565b600082825260208201905092915050565b7f47656c61746f4d616b65724a6f623a204f6e6c7920506f6b654d650000000000600082015250565b6000610fe4601b83610f9d565b9150610fef82610fae565b602082019050919050565b6000602082019050818103600083015261101381610fd7565b9050919050565b7f47656c61746f4d616b65724a6f623a204c656e677468206d69736d6174636800600082015250565b6000611050601f83610f9d565b915061105b8261101a565b602082019050919050565b6000602082019050818103600083015261107f81611043565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156110cb576110ca610c18565b5b60006110d984828501610da7565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261110e5761110d6110e2565b5b80840192508235915067ffffffffffffffff8211156111305761112f6110e7565b5b60208301925060018202360383131561114c5761114b6110ec565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061118e82610df2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111c1576111c0611154565b5b600182019050919050565b6000815190506111db81610dfc565b92915050565b6000602082840312156111f7576111f6610c18565b5b6000611205848285016111cc565b91505092915050565b600061121982610df2565b915061122483610df2565b92508282101561123757611236611154565b5b828203905092915050565b600081905092915050565b7f47656c61746f4d616b65724a6f623a204f6e6c79206a6f627320617661696c6160008201527f626c6520757020746f20696e6465782000000000000000000000000000000000602082015250565b60006112a9603083611242565b91506112b48261124d565b603082019050919050565b60006112ca82610eaa565b6112d48185611242565b93506112e4818560208601610ec6565b80840191505092915050565b60006112fb8261129c565b915061130782846112bf565b915081905092915050565b7f2c20696e707574746564207374617274496e6465782069732000000000000000815250565b600061134382611312565b60198201915061135382846112bf565b915081905092915050565b600061136a82856112bf565b915061137682846112bf565b91508190509392505050565b61138b81610dbc565b82525050565b61139a81610df2565b82525050565b60006060820190506113b56000830186611382565b6113c26020830185611391565b6113cf6040830184611391565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61140f82610ef9565b810181811067ffffffffffffffff8211171561142e5761142d6113d7565b5b80604052505050565b6000611441610c0e565b905061144d8282611406565b919050565b600067ffffffffffffffff82111561146d5761146c6113d7565b5b602082029050602081019050919050565b600080fd5b600080fd5b60008151905061149781610d90565b92915050565b6114a681610e8f565b81146114b157600080fd5b50565b6000815190506114c38161149d565b92915050565b600080fd5b600067ffffffffffffffff8211156114e9576114e86113d7565b5b6114f282610ef9565b9050602081019050919050565b600061151261150d846114ce565b611437565b90508281526020810184848401111561152e5761152d6114c9565b5b611539848285610ec6565b509392505050565b600082601f83011261155657611555610c22565b5b81516115668482602086016114ff565b91505092915050565b6000606082840312156115855761158461147e565b5b61158f6060611437565b9050600061159f84828501611488565b60008301525060206115b3848285016114b4565b602083015250604082015167ffffffffffffffff8111156115d7576115d6611483565b5b6115e384828501611541565b60408301525092915050565b60006116026115fd84611452565b611437565b9050808382526020820190506020840283018581111561162557611624610c2c565b5b835b8181101561166c57805167ffffffffffffffff81111561164a57611649610c22565b5b808601611657898261156f565b85526020850194505050602081019050611627565b5050509392505050565b600082601f83011261168b5761168a610c22565b5b815161169b8482602086016115ef565b91505092915050565b6000602082840312156116ba576116b9610c18565b5b600082015167ffffffffffffffff8111156116d8576116d7610c1d565b5b6116e484828501611676565b91505092915050565b60006040820190506117026000830185611382565b81810360208301526117148184610f0a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61175281610d7e565b82525050565b60006117648383611749565b60208301905092915050565b6000602082019050919050565b60006117888261171d565b6117928185611728565b935061179d83611739565b8060005b838110156117ce5781516117b58882611758565b97506117c083611770565b9250506001810190506117a1565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061182382610eaa565b61182d8185611807565b935061183d818560208601610ec6565b61184681610ef9565b840191505092915050565b600061185d8383611818565b905092915050565b6000602082019050919050565b600061187d826117db565b61188781856117e6565b935083602082028501611899856117f7565b8060005b858110156118d557848403895281516118b68582611851565b94506118c183611865565b925060208a0199505060018101905061189d565b50829750879550505050505092915050565b60006040820190508181036000830152611901818561177d565b905081810360208301526119158184611872565b90509392505050565b600061192a82846112bf565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061196f82610df2565b915061197a83610df2565b92508261198a57611989611935565b5b828206905092915050565b600081519050919050565b600081905092915050565b60006119b682611995565b6119c081856119a0565b93506119d0818560208601610ec6565b80840191505092915050565b60006119e882856119ab565b91506119f482846119ab565b91508190509392505050565b6000611a0b82611995565b611a158185610f9d565b9350611a25818560208601610ec6565b611a2e81610ef9565b840191505092915050565b60006020820190508181036000830152611a538184611a00565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b6000611a91600f836119a0565b9150611a9c82611a5b565b600f82019050919050565b6000611ab382846119ab565b9150611abe82611a84565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b6000611aff6014836119a0565b9150611b0a82611ac9565b601482019050919050565b6000611b2182846119ab565b9150611b2c82611af2565b91508190509291505056fea264697066735822122006d20d277bf6298cee3785e838e682b4f74a316d287b1f436133b4b98aa8a0f964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630546660e1461004657806328d7b1d314610062578063c84eee0d14610093575b600080fd5b610060600480360381019061005b9190610cdd565b6100b1565b005b61007c60048036038101906100779190610e28565b610247565b60405161008a929190610f43565b60405180910390f35b61009b610793565b6040516100a89190610f82565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461013f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013690610ffa565b60405180910390fd5b818190508484905014610187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017e90611066565b60405180910390fd5b60005b848490508110156102405761022d8585838181106101ab576101aa611086565b5b90506020020160208101906101c091906110b5565b8484848181106101d3576101d2611086565b5b90506020028101906101e591906110f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b7565b808061023890611183565b91505061018a565b5050505050565b60006060600086905060008173ffffffffffffffffffffffffffffffffffffffff16639212051c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906111e1565b9050600081141561030f5760006040518060400160405280601e81526020017f47656c61746f4d616b65724a6f623a204e6f206a6f6273206c6973746564000081525093509350505061078a565b8086106103ab57600061032d600183610328919061120e565b61087a565b60405160200161033d91906112f0565b604051602081830303815290604052905060006103598861087a565b6040516020016103699190611338565b60405160208183030381529060405290506000828260405160200161038f92919061135e565b604051602081830303815290604052955095505050505061078a565b60008186116103ba57856103bc565b815b905060008973ffffffffffffffffffffffffffffffffffffffff1663a613ff9c8a8a856040518463ffffffff1660e01b81526004016103fd939291906113a0565b6000604051808303816000875af115801561041c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061044591906116a4565b90506000805b825181101561049a5782818151811061046757610466611086565b5b6020026020010151602001511561048757818061048390611183565b9250505b808061049290611183565b91505061044b565b5060008114156104ea5760006040518060400160405280602081526020017f47656c61746f4d616b65724a6f623a204e6f20776f726b61626c65206a6f627381525096509650505050505061078a565b60008167ffffffffffffffff811115610506576105056113d7565b5b6040519080825280602002602001820160405280156105345781602001602082028036833780820191505090505b50905060008267ffffffffffffffff811115610553576105526113d7565b5b60405190808252806020026020018201604052801561058657816020015b60608152602001906001900390816105715790505b5090506000805b85518110156106fc578581815181106105a9576105a8611086565b5b602002602001015160200151156106e9578581815181106105cd576105cc611086565b5b6020026020010151600001518483815181106105ec576105eb611086565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050631d2ab00060e01b8e87838151811061064257610641611086565b5b60200260200101516040015160405160240161065f9291906116ed565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508383815181106106cf576106ce611086565b5b602002602001018190525081806106e590611183565b9250505b80806106f490611183565b91505061058d565b506000630546660e60e01b848460405160240161071a9291906118e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506001819a509a505050505050505050505b94509492505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516107df919061191e565b6000604051808303816000865af19150503d806000811461081c576040519150601f19603f3d011682016040523d82523d6000602084013e610821565b606091505b509150915081610874576108736040518060400160405280601081526020017f47656c61746f4d616b65724a6f623a20000000000000000000000000000000008152508261095290919063ffffffff16565b5b50505050565b60606000600161088984610abb565b01905060008167ffffffffffffffff8111156108a8576108a76113d7565b5b6040519080825280601f01601f1916602001820160405280156108da5781602001600182028036833780820191505090505b509050600082602001820190505b600115610947578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161093157610930611935565b5b049450600085141561094257610947565b6108e8565b819350505050919050565b6004602083516109629190611964565b1415610a5f576000826020015190506308c379a060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610a035760448301925081836040516020016109b89291906119dc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa9190611a39565b60405180910390fd5b81604051602001610a149190611aa7565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a569190611a39565b60405180910390fd5b80604051602001610a709190611b15565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab29190611a39565b60405180910390fd5b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610b19577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610b0f57610b0e611935565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610b56576d04ee2d6d415b85acef81000000008381610b4c57610b4b611935565b5b0492506020810190505b662386f26fc100008310610b8557662386f26fc100008381610b7b57610b7a611935565b5b0492506010810190505b6305f5e1008310610bae576305f5e1008381610ba457610ba3611935565b5b0492506008810190505b6127108310610bd3576127108381610bc957610bc8611935565b5b0492506004810190505b60648310610bf65760648381610bec57610beb611935565b5b0492506002810190505b600a8310610c05576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610c4757610c46610c22565b5b8235905067ffffffffffffffff811115610c6457610c63610c27565b5b602083019150836020820283011115610c8057610c7f610c2c565b5b9250929050565b60008083601f840112610c9d57610c9c610c22565b5b8235905067ffffffffffffffff811115610cba57610cb9610c27565b5b602083019150836020820283011115610cd657610cd5610c2c565b5b9250929050565b60008060008060408587031215610cf757610cf6610c18565b5b600085013567ffffffffffffffff811115610d1557610d14610c1d565b5b610d2187828801610c31565b9450945050602085013567ffffffffffffffff811115610d4457610d43610c1d565b5b610d5087828801610c87565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d8982610d5e565b9050919050565b610d9981610d7e565b8114610da457600080fd5b50565b600081359050610db681610d90565b92915050565b6000819050919050565b610dcf81610dbc565b8114610dda57600080fd5b50565b600081359050610dec81610dc6565b92915050565b6000819050919050565b610e0581610df2565b8114610e1057600080fd5b50565b600081359050610e2281610dfc565b92915050565b60008060008060808587031215610e4257610e41610c18565b5b6000610e5087828801610da7565b9450506020610e6187828801610ddd565b9350506040610e7287828801610e13565b9250506060610e8387828801610e13565b91505092959194509250565b60008115159050919050565b610ea481610e8f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ee4578082015181840152602081019050610ec9565b83811115610ef3576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f1582610eaa565b610f1f8185610eb5565b9350610f2f818560208601610ec6565b610f3881610ef9565b840191505092915050565b6000604082019050610f586000830185610e9b565b8181036020830152610f6a8184610f0a565b90509392505050565b610f7c81610d7e565b82525050565b6000602082019050610f976000830184610f73565b92915050565b600082825260208201905092915050565b7f47656c61746f4d616b65724a6f623a204f6e6c7920506f6b654d650000000000600082015250565b6000610fe4601b83610f9d565b9150610fef82610fae565b602082019050919050565b6000602082019050818103600083015261101381610fd7565b9050919050565b7f47656c61746f4d616b65724a6f623a204c656e677468206d69736d6174636800600082015250565b6000611050601f83610f9d565b915061105b8261101a565b602082019050919050565b6000602082019050818103600083015261107f81611043565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156110cb576110ca610c18565b5b60006110d984828501610da7565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261110e5761110d6110e2565b5b80840192508235915067ffffffffffffffff8211156111305761112f6110e7565b5b60208301925060018202360383131561114c5761114b6110ec565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061118e82610df2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111c1576111c0611154565b5b600182019050919050565b6000815190506111db81610dfc565b92915050565b6000602082840312156111f7576111f6610c18565b5b6000611205848285016111cc565b91505092915050565b600061121982610df2565b915061122483610df2565b92508282101561123757611236611154565b5b828203905092915050565b600081905092915050565b7f47656c61746f4d616b65724a6f623a204f6e6c79206a6f627320617661696c6160008201527f626c6520757020746f20696e6465782000000000000000000000000000000000602082015250565b60006112a9603083611242565b91506112b48261124d565b603082019050919050565b60006112ca82610eaa565b6112d48185611242565b93506112e4818560208601610ec6565b80840191505092915050565b60006112fb8261129c565b915061130782846112bf565b915081905092915050565b7f2c20696e707574746564207374617274496e6465782069732000000000000000815250565b600061134382611312565b60198201915061135382846112bf565b915081905092915050565b600061136a82856112bf565b915061137682846112bf565b91508190509392505050565b61138b81610dbc565b82525050565b61139a81610df2565b82525050565b60006060820190506113b56000830186611382565b6113c26020830185611391565b6113cf6040830184611391565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61140f82610ef9565b810181811067ffffffffffffffff8211171561142e5761142d6113d7565b5b80604052505050565b6000611441610c0e565b905061144d8282611406565b919050565b600067ffffffffffffffff82111561146d5761146c6113d7565b5b602082029050602081019050919050565b600080fd5b600080fd5b60008151905061149781610d90565b92915050565b6114a681610e8f565b81146114b157600080fd5b50565b6000815190506114c38161149d565b92915050565b600080fd5b600067ffffffffffffffff8211156114e9576114e86113d7565b5b6114f282610ef9565b9050602081019050919050565b600061151261150d846114ce565b611437565b90508281526020810184848401111561152e5761152d6114c9565b5b611539848285610ec6565b509392505050565b600082601f83011261155657611555610c22565b5b81516115668482602086016114ff565b91505092915050565b6000606082840312156115855761158461147e565b5b61158f6060611437565b9050600061159f84828501611488565b60008301525060206115b3848285016114b4565b602083015250604082015167ffffffffffffffff8111156115d7576115d6611483565b5b6115e384828501611541565b60408301525092915050565b60006116026115fd84611452565b611437565b9050808382526020820190506020840283018581111561162557611624610c2c565b5b835b8181101561166c57805167ffffffffffffffff81111561164a57611649610c22565b5b808601611657898261156f565b85526020850194505050602081019050611627565b5050509392505050565b600082601f83011261168b5761168a610c22565b5b815161169b8482602086016115ef565b91505092915050565b6000602082840312156116ba576116b9610c18565b5b600082015167ffffffffffffffff8111156116d8576116d7610c1d565b5b6116e484828501611676565b91505092915050565b60006040820190506117026000830185611382565b81810360208301526117148184610f0a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61175281610d7e565b82525050565b60006117648383611749565b60208301905092915050565b6000602082019050919050565b60006117888261171d565b6117928185611728565b935061179d83611739565b8060005b838110156117ce5781516117b58882611758565b97506117c083611770565b9250506001810190506117a1565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061182382610eaa565b61182d8185611807565b935061183d818560208601610ec6565b61184681610ef9565b840191505092915050565b600061185d8383611818565b905092915050565b6000602082019050919050565b600061187d826117db565b61188781856117e6565b935083602082028501611899856117f7565b8060005b858110156118d557848403895281516118b68582611851565b94506118c183611865565b925060208a0199505060018101905061189d565b50829750879550505050505092915050565b60006040820190508181036000830152611901818561177d565b905081810360208301526119158184611872565b90509392505050565b600061192a82846112bf565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061196f82610df2565b915061197a83610df2565b92508261198a57611989611935565b5b828206905092915050565b600081519050919050565b600081905092915050565b60006119b682611995565b6119c081856119a0565b93506119d0818560208601610ec6565b80840191505092915050565b60006119e882856119ab565b91506119f482846119ab565b91508190509392505050565b6000611a0b82611995565b611a158185610f9d565b9350611a25818560208601610ec6565b611a2e81610ef9565b840191505092915050565b60006020820190508181036000830152611a538184611a00565b905092915050565b7f4e6f4572726f7253656c6563746f720000000000000000000000000000000000600082015250565b6000611a91600f836119a0565b9150611a9c82611a5b565b600f82019050919050565b6000611ab382846119ab565b9150611abe82611a84565b915081905092915050565b7f556e657870656374656452657475726e64617461000000000000000000000000600082015250565b6000611aff6014836119a0565b9150611b0a82611ac9565b601482019050919050565b6000611b2182846119ab565b9150611b2c82611af2565b91508190509291505056fea264697066735822122006d20d277bf6298cee3785e838e682b4f74a316d287b1f436133b4b98aa8a0f964736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}